// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module execute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_to_metadata_key_address0,
        key_to_metadata_key_ce0,
        key_to_metadata_key_q0,
        key_to_metadata_occu_address0,
        key_to_metadata_occu_ce0,
        key_to_metadata_occu_we0,
        key_to_metadata_occu_d0,
        key_to_metadata_occu_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] key_to_metadata_key_address0;
output   key_to_metadata_key_ce0;
input  [31:0] key_to_metadata_key_q0;
output  [8:0] key_to_metadata_occu_address0;
output   key_to_metadata_occu_ce0;
output   key_to_metadata_occu_we0;
output  [0:0] key_to_metadata_occu_d0;
input  [0:0] key_to_metadata_occu_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_to_metadata_key_ce0;
reg[8:0] key_to_metadata_occu_address0;
reg key_to_metadata_occu_ce0;
reg key_to_metadata_occu_we0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] key_to_metadata_occu_2_reg_72;
wire    ap_CS_fsm_state2;
reg   [0:0] key_to_metadata_occu_3_reg_82;
reg   [0:0] ap_phi_mux_agg_result_delete_el_phi_fu_58_p4;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_9_fu_66_p2;
reg   [0:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= ap_phi_mux_agg_result_delete_el_phi_fu_58_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_to_metadata_occu_3_reg_82 <= key_to_metadata_occu_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((tmp_9_fu_66_p2 == 1'd0) | (key_to_metadata_occu_3_reg_82 == 1'd0))) begin
            ap_phi_mux_agg_result_delete_el_phi_fu_58_p4 = 1'd1;
        end else if (((tmp_9_fu_66_p2 == 1'd1) & (key_to_metadata_occu_3_reg_82 == 1'd1))) begin
            ap_phi_mux_agg_result_delete_el_phi_fu_58_p4 = 1'd0;
        end else begin
            ap_phi_mux_agg_result_delete_el_phi_fu_58_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_agg_result_delete_el_phi_fu_58_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = ap_phi_mux_agg_result_delete_el_phi_fu_58_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_to_metadata_key_ce0 = 1'b1;
    end else begin
        key_to_metadata_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_to_metadata_occu_address0 = key_to_metadata_occu_2_reg_72;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_to_metadata_occu_address0 = 64'd134;
    end else begin
        key_to_metadata_occu_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_to_metadata_occu_ce0 = 1'b1;
    end else begin
        key_to_metadata_occu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_fu_66_p2 == 1'd1) & (key_to_metadata_occu_3_reg_82 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        key_to_metadata_occu_we0 = 1'b1;
    end else begin
        key_to_metadata_occu_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign key_to_metadata_key_address0 = 64'd134;

assign key_to_metadata_occu_2_reg_72 = 64'd134;

assign key_to_metadata_occu_d0 = 1'd0;

assign tmp_9_fu_66_p2 = ((key_to_metadata_key_q0 == 32'd4) ? 1'b1 : 1'b0);

endmodule //execute
