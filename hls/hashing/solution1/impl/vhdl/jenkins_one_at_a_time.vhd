-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jenkins_one_at_a_time is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    length_r : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jenkins_one_at_a_time is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "jenkins_one_at_a_time,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.964000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=336}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_75_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_4_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_4_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal hash_6_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_reg_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_86_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_91_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_1_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_103_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_2_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_5_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_155_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    hash_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                hash_reg_63 <= hash_6_fu_169_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                hash_reg_63 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_52 <= i_1_reg_183;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_52 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                hash_4_reg_193 <= hash_4_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_183 <= i_1_fu_80_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_75_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_75_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_75_p2)
    begin
        if (((tmp_fu_75_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_75_p2)
    begin
        if (((tmp_fu_75_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(hash_2_fu_117_p2) + unsigned(tmp_4_fu_123_p2));
    hash_1_fu_97_p2 <= std_logic_vector(unsigned(hash_reg_63) + unsigned(tmp_1_fu_91_p2));
    hash_2_fu_117_p2 <= (tmp_6_fu_113_p1 xor hash_1_fu_97_p2);
    hash_4_fu_139_p2 <= std_logic_vector(signed(tmp_9_fu_135_p1) + signed(hash_reg_63));
    hash_5_fu_150_p2 <= std_logic_vector(unsigned(hash_4_reg_193) + unsigned(tmp_5_fu_145_p2));
    hash_6_fu_169_p2 <= (tmp_s_fu_165_p1 xor hash_5_fu_150_p2);
    i_1_fu_80_p2 <= std_logic_vector(unsigned(i_reg_52) + unsigned(ap_const_lv32_1));
    key_address0 <= tmp_8_fu_86_p1(10 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_91_p2 <= std_logic_vector(shift_left(unsigned(hash_reg_63),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_2_fu_155_p4 <= hash_5_fu_150_p2(31 downto 6);
    tmp_3_fu_103_p4 <= hash_1_fu_97_p2(31 downto 11);
    tmp_4_fu_123_p2 <= std_logic_vector(shift_left(unsigned(hash_2_fu_117_p2),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    tmp_5_fu_145_p2 <= std_logic_vector(shift_left(unsigned(hash_4_reg_193),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    tmp_6_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_103_p4),32));
        tmp_8_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_52),64));

        tmp_9_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(key_q0),32));

    tmp_fu_75_p2 <= "1" when (i_reg_52 = length_r) else "0";
    tmp_s_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_155_p4),32));
end behav;
