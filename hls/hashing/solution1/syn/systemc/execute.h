// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _execute_HH_
#define _execute_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct execute : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > op_type;
    sc_in< sc_lv<32> > hash;
    sc_in< sc_lv<32> > val_addr;
    sc_out< sc_lv<7> > key_val_dram_address0;
    sc_out< sc_logic > key_val_dram_ce0;
    sc_out< sc_logic > key_val_dram_we0;
    sc_out< sc_lv<32> > key_val_dram_d0;
    sc_in< sc_lv<32> > key_val_dram_q0;
    sc_out< sc_lv<7> > key_val_dram_address1;
    sc_out< sc_logic > key_val_dram_ce1;
    sc_in< sc_lv<32> > key_val_dram_q1;
    sc_out< sc_lv<32> > val_addr_bram_Addr_A;
    sc_out< sc_logic > val_addr_bram_EN_A;
    sc_out< sc_lv<4> > val_addr_bram_WEN_A;
    sc_out< sc_lv<32> > val_addr_bram_Din_A;
    sc_in< sc_lv<32> > val_addr_bram_Dout_A;
    sc_out< sc_logic > val_addr_bram_Clk_A;
    sc_out< sc_logic > val_addr_bram_Rst_A;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    execute(sc_module_name name);
    SC_HAS_PROCESS(execute);

    ~execute();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_106_p2;
    sc_signal< sc_lv<1> > tmp_reg_156;
    sc_signal< sc_lv<1> > tmp_1_fu_112_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_160;
    sc_signal< sc_lv<7> > key_val_dram_addr_reg_164;
    sc_signal< sc_lv<32> > stored_val_reg_174;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_5_fu_134_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_180;
    sc_signal< sc_lv<32> > stored_val2_0_s_fu_143_p3;
    sc_signal< sc_lv<32> > ap_phi_mux_UnifiedRetVal_phi_fu_97_p6;
    sc_signal< sc_lv<32> > UnifiedRetVal_reg_93;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_2_fu_118_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_129_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_139_p1;
    sc_signal< sc_lv<32> > val_addr_bram_Addr_A_orig;
    sc_signal< sc_lv<32> > tmp_3_fu_123_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_28;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_UnifiedRetVal_phi_fu_97_p6();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_key_val_dram_address0();
    void thread_key_val_dram_address1();
    void thread_key_val_dram_ce0();
    void thread_key_val_dram_ce1();
    void thread_key_val_dram_d0();
    void thread_key_val_dram_we0();
    void thread_stored_val2_0_s_fu_143_p3();
    void thread_tmp_1_fu_112_p2();
    void thread_tmp_2_fu_118_p1();
    void thread_tmp_3_fu_123_p2();
    void thread_tmp_4_fu_129_p1();
    void thread_tmp_5_fu_134_p2();
    void thread_tmp_fu_106_p2();
    void thread_tmp_s_fu_139_p1();
    void thread_val_addr_bram_Addr_A();
    void thread_val_addr_bram_Addr_A_orig();
    void thread_val_addr_bram_Clk_A();
    void thread_val_addr_bram_Din_A();
    void thread_val_addr_bram_EN_A();
    void thread_val_addr_bram_Rst_A();
    void thread_val_addr_bram_WEN_A();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
