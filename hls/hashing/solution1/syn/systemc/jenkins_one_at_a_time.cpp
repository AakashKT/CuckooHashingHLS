// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "jenkins_one_at_a_time.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic jenkins_one_at_a_time::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic jenkins_one_at_a_time::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> jenkins_one_at_a_time::ap_ST_fsm_state1 = "1";
const sc_lv<4> jenkins_one_at_a_time::ap_ST_fsm_state2 = "10";
const sc_lv<4> jenkins_one_at_a_time::ap_ST_fsm_state3 = "100";
const sc_lv<4> jenkins_one_at_a_time::ap_ST_fsm_state4 = "1000";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_1 = "1";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_2 = "10";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_3 = "11";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_B = "1011";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_1F = "11111";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_F = "1111";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_A = "1010";
const sc_lv<32> jenkins_one_at_a_time::ap_const_lv32_6 = "110";
const sc_lv<1> jenkins_one_at_a_time::ap_const_lv1_1 = "1";
const bool jenkins_one_at_a_time::ap_const_boolean_1 = true;

jenkins_one_at_a_time::jenkins_one_at_a_time(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );
    sensitive << ( hash_2_fu_117_p2 );
    sensitive << ( tmp_4_fu_123_p2 );

    SC_METHOD(thread_hash_1_fu_97_p2);
    sensitive << ( hash_reg_63 );
    sensitive << ( tmp_1_fu_91_p2 );

    SC_METHOD(thread_hash_2_fu_117_p2);
    sensitive << ( hash_1_fu_97_p2 );
    sensitive << ( tmp_6_fu_113_p1 );

    SC_METHOD(thread_hash_4_fu_139_p2);
    sensitive << ( hash_reg_63 );
    sensitive << ( tmp_9_fu_135_p1 );

    SC_METHOD(thread_hash_5_fu_150_p2);
    sensitive << ( hash_4_reg_193 );
    sensitive << ( tmp_5_fu_145_p2 );

    SC_METHOD(thread_hash_6_fu_169_p2);
    sensitive << ( hash_5_fu_150_p2 );
    sensitive << ( tmp_s_fu_165_p1 );

    SC_METHOD(thread_i_1_fu_80_p2);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_8_fu_86_p1 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_1_fu_91_p2);
    sensitive << ( hash_reg_63 );

    SC_METHOD(thread_tmp_2_fu_155_p4);
    sensitive << ( hash_5_fu_150_p2 );

    SC_METHOD(thread_tmp_3_fu_103_p4);
    sensitive << ( hash_1_fu_97_p2 );

    SC_METHOD(thread_tmp_4_fu_123_p2);
    sensitive << ( hash_2_fu_117_p2 );

    SC_METHOD(thread_tmp_5_fu_145_p2);
    sensitive << ( hash_4_reg_193 );

    SC_METHOD(thread_tmp_6_fu_113_p1);
    sensitive << ( tmp_3_fu_103_p4 );

    SC_METHOD(thread_tmp_8_fu_86_p1);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_tmp_9_fu_135_p1);
    sensitive << ( key_q0 );

    SC_METHOD(thread_tmp_fu_75_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_tmp_s_fu_165_p1);
    sensitive << ( tmp_2_fu_155_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_75_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "jenkins_one_at_a_time_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, length_r, "(port)length_r");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_80_p2, "i_1_fu_80_p2");
    sc_trace(mVcdFile, i_1_reg_183, "i_1_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_75_p2, "tmp_fu_75_p2");
    sc_trace(mVcdFile, hash_4_fu_139_p2, "hash_4_fu_139_p2");
    sc_trace(mVcdFile, hash_4_reg_193, "hash_4_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, hash_6_fu_169_p2, "hash_6_fu_169_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_reg_52, "i_reg_52");
    sc_trace(mVcdFile, hash_reg_63, "hash_reg_63");
    sc_trace(mVcdFile, tmp_8_fu_86_p1, "tmp_8_fu_86_p1");
    sc_trace(mVcdFile, tmp_1_fu_91_p2, "tmp_1_fu_91_p2");
    sc_trace(mVcdFile, hash_1_fu_97_p2, "hash_1_fu_97_p2");
    sc_trace(mVcdFile, tmp_3_fu_103_p4, "tmp_3_fu_103_p4");
    sc_trace(mVcdFile, tmp_6_fu_113_p1, "tmp_6_fu_113_p1");
    sc_trace(mVcdFile, hash_2_fu_117_p2, "hash_2_fu_117_p2");
    sc_trace(mVcdFile, tmp_4_fu_123_p2, "tmp_4_fu_123_p2");
    sc_trace(mVcdFile, tmp_9_fu_135_p1, "tmp_9_fu_135_p1");
    sc_trace(mVcdFile, tmp_5_fu_145_p2, "tmp_5_fu_145_p2");
    sc_trace(mVcdFile, hash_5_fu_150_p2, "hash_5_fu_150_p2");
    sc_trace(mVcdFile, tmp_2_fu_155_p4, "tmp_2_fu_155_p4");
    sc_trace(mVcdFile, tmp_s_fu_165_p1, "tmp_s_fu_165_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("jenkins_one_at_a_time.hdltvin.dat");
    mHdltvoutHandle.open("jenkins_one_at_a_time.hdltvout.dat");
}

jenkins_one_at_a_time::~jenkins_one_at_a_time() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void jenkins_one_at_a_time::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        hash_reg_63 = hash_6_fu_169_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        hash_reg_63 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_52 = i_1_reg_183.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_52 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        hash_4_reg_193 = hash_4_fu_139_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_183 = i_1_fu_80_p2.read();
    }
}

void jenkins_one_at_a_time::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void jenkins_one_at_a_time::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void jenkins_one_at_a_time::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void jenkins_one_at_a_time::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void jenkins_one_at_a_time::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void jenkins_one_at_a_time::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void jenkins_one_at_a_time::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void jenkins_one_at_a_time::thread_ap_return() {
    ap_return = (!hash_2_fu_117_p2.read().is_01() || !tmp_4_fu_123_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(hash_2_fu_117_p2.read()) + sc_biguint<32>(tmp_4_fu_123_p2.read()));
}

void jenkins_one_at_a_time::thread_hash_1_fu_97_p2() {
    hash_1_fu_97_p2 = (!hash_reg_63.read().is_01() || !tmp_1_fu_91_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(hash_reg_63.read()) + sc_biguint<32>(tmp_1_fu_91_p2.read()));
}

void jenkins_one_at_a_time::thread_hash_2_fu_117_p2() {
    hash_2_fu_117_p2 = (tmp_6_fu_113_p1.read() ^ hash_1_fu_97_p2.read());
}

void jenkins_one_at_a_time::thread_hash_4_fu_139_p2() {
    hash_4_fu_139_p2 = (!tmp_9_fu_135_p1.read().is_01() || !hash_reg_63.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_9_fu_135_p1.read()) + sc_biguint<32>(hash_reg_63.read()));
}

void jenkins_one_at_a_time::thread_hash_5_fu_150_p2() {
    hash_5_fu_150_p2 = (!hash_4_reg_193.read().is_01() || !tmp_5_fu_145_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(hash_4_reg_193.read()) + sc_biguint<32>(tmp_5_fu_145_p2.read()));
}

void jenkins_one_at_a_time::thread_hash_6_fu_169_p2() {
    hash_6_fu_169_p2 = (tmp_s_fu_165_p1.read() ^ hash_5_fu_150_p2.read());
}

void jenkins_one_at_a_time::thread_i_1_fu_80_p2() {
    i_1_fu_80_p2 = (!i_reg_52.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_52.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void jenkins_one_at_a_time::thread_key_address0() {
    key_address0 =  (sc_lv<10>) (tmp_8_fu_86_p1.read());
}

void jenkins_one_at_a_time::thread_key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_ce0 = ap_const_logic_1;
    } else {
        key_ce0 = ap_const_logic_0;
    }
}

void jenkins_one_at_a_time::thread_tmp_1_fu_91_p2() {
    tmp_1_fu_91_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): hash_reg_63.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void jenkins_one_at_a_time::thread_tmp_2_fu_155_p4() {
    tmp_2_fu_155_p4 = hash_5_fu_150_p2.read().range(31, 6);
}

void jenkins_one_at_a_time::thread_tmp_3_fu_103_p4() {
    tmp_3_fu_103_p4 = hash_1_fu_97_p2.read().range(31, 11);
}

void jenkins_one_at_a_time::thread_tmp_4_fu_123_p2() {
    tmp_4_fu_123_p2 = (!ap_const_lv32_F.is_01())? sc_lv<32>(): hash_2_fu_117_p2.read() << (unsigned short)ap_const_lv32_F.to_uint();
}

void jenkins_one_at_a_time::thread_tmp_5_fu_145_p2() {
    tmp_5_fu_145_p2 = (!ap_const_lv32_A.is_01())? sc_lv<32>(): hash_4_reg_193.read() << (unsigned short)ap_const_lv32_A.to_uint();
}

void jenkins_one_at_a_time::thread_tmp_6_fu_113_p1() {
    tmp_6_fu_113_p1 = esl_zext<32,21>(tmp_3_fu_103_p4.read());
}

void jenkins_one_at_a_time::thread_tmp_8_fu_86_p1() {
    tmp_8_fu_86_p1 = esl_sext<64,32>(i_reg_52.read());
}

void jenkins_one_at_a_time::thread_tmp_9_fu_135_p1() {
    tmp_9_fu_135_p1 = esl_sext<32,8>(key_q0.read());
}

void jenkins_one_at_a_time::thread_tmp_fu_75_p2() {
    tmp_fu_75_p2 = (!i_reg_52.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_52.read() == length_r.read());
}

void jenkins_one_at_a_time::thread_tmp_s_fu_165_p1() {
    tmp_s_fu_165_p1 = esl_zext<32,26>(tmp_2_fu_155_p4.read());
}

void jenkins_one_at_a_time::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_75_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void jenkins_one_at_a_time::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"length_r\" :  \"" << length_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address0\" :  \"" << key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce0\" :  \"" << key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q0\" :  \"" << key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

