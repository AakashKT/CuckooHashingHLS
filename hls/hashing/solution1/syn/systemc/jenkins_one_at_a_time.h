// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _jenkins_one_at_a_time_HH_
#define _jenkins_one_at_a_time_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct jenkins_one_at_a_time : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > length_r;
    sc_out< sc_lv<10> > key_address0;
    sc_out< sc_logic > key_ce0;
    sc_in< sc_lv<8> > key_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    jenkins_one_at_a_time(sc_module_name name);
    SC_HAS_PROCESS(jenkins_one_at_a_time);

    ~jenkins_one_at_a_time();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > i_1_fu_80_p2;
    sc_signal< sc_lv<32> > i_1_reg_183;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_75_p2;
    sc_signal< sc_lv<32> > hash_4_fu_139_p2;
    sc_signal< sc_lv<32> > hash_4_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > hash_6_fu_169_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_reg_52;
    sc_signal< sc_lv<32> > hash_reg_63;
    sc_signal< sc_lv<64> > tmp_8_fu_86_p1;
    sc_signal< sc_lv<32> > tmp_1_fu_91_p2;
    sc_signal< sc_lv<32> > hash_1_fu_97_p2;
    sc_signal< sc_lv<21> > tmp_3_fu_103_p4;
    sc_signal< sc_lv<32> > tmp_6_fu_113_p1;
    sc_signal< sc_lv<32> > hash_2_fu_117_p2;
    sc_signal< sc_lv<32> > tmp_4_fu_123_p2;
    sc_signal< sc_lv<32> > tmp_9_fu_135_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_145_p2;
    sc_signal< sc_lv<32> > hash_5_fu_150_p2;
    sc_signal< sc_lv<26> > tmp_2_fu_155_p4;
    sc_signal< sc_lv<32> > tmp_s_fu_165_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_hash_1_fu_97_p2();
    void thread_hash_2_fu_117_p2();
    void thread_hash_4_fu_139_p2();
    void thread_hash_5_fu_150_p2();
    void thread_hash_6_fu_169_p2();
    void thread_i_1_fu_80_p2();
    void thread_key_address0();
    void thread_key_ce0();
    void thread_tmp_1_fu_91_p2();
    void thread_tmp_2_fu_155_p4();
    void thread_tmp_3_fu_103_p4();
    void thread_tmp_4_fu_123_p2();
    void thread_tmp_5_fu_145_p2();
    void thread_tmp_6_fu_113_p1();
    void thread_tmp_8_fu_86_p1();
    void thread_tmp_9_fu_135_p1();
    void thread_tmp_fu_75_p2();
    void thread_tmp_s_fu_165_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
