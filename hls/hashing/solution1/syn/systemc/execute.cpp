// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "execute.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic execute::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic execute::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> execute::ap_ST_fsm_state1 = "1";
const sc_lv<3> execute::ap_ST_fsm_state2 = "10";
const sc_lv<3> execute::ap_ST_fsm_state3 = "100";
const sc_lv<32> execute::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> execute::ap_const_lv1_0 = "0";
const sc_lv<32> execute::ap_const_lv32_1 = "1";
const sc_lv<32> execute::ap_const_lv32_2 = "10";
const sc_lv<1> execute::ap_const_lv1_1 = "1";
const sc_lv<32> execute::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<4> execute::ap_const_lv4_0 = "0000";
const sc_lv<4> execute::ap_const_lv4_F = "1111";
const sc_lv<32> execute::ap_const_lv32_28 = "101000";
const bool execute::ap_const_boolean_1 = true;

execute::execute(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_UnifiedRetVal_phi_fu_97_p6);
    sensitive << ( tmp_reg_156 );
    sensitive << ( tmp_1_reg_160 );
    sensitive << ( stored_val2_0_s_fu_143_p3 );
    sensitive << ( UnifiedRetVal_reg_93 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_phi_mux_UnifiedRetVal_phi_fu_97_p6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_key_val_dram_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( key_val_dram_addr_reg_164 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_118_p1 );

    SC_METHOD(thread_key_val_dram_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_4_fu_129_p1 );

    SC_METHOD(thread_key_val_dram_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_val_dram_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_key_val_dram_d0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_val_dram_we0);
    sensitive << ( tmp_1_reg_160 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_fu_134_p2 );

    SC_METHOD(thread_stored_val2_0_s_fu_143_p3);
    sensitive << ( stored_val_reg_174 );
    sensitive << ( tmp_5_reg_180 );

    SC_METHOD(thread_tmp_1_fu_112_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_type );
    sensitive << ( tmp_fu_106_p2 );

    SC_METHOD(thread_tmp_2_fu_118_p1);
    sensitive << ( val_addr );

    SC_METHOD(thread_tmp_3_fu_123_p2);
    sensitive << ( val_addr );

    SC_METHOD(thread_tmp_4_fu_129_p1);
    sensitive << ( tmp_3_fu_123_p2 );

    SC_METHOD(thread_tmp_5_fu_134_p2);
    sensitive << ( hash );
    sensitive << ( key_val_dram_q0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_fu_106_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_type );

    SC_METHOD(thread_tmp_s_fu_139_p1);
    sensitive << ( hash );

    SC_METHOD(thread_val_addr_bram_Addr_A);
    sensitive << ( val_addr_bram_Addr_A_orig );

    SC_METHOD(thread_val_addr_bram_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_139_p1 );

    SC_METHOD(thread_val_addr_bram_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_val_addr_bram_Din_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_val_addr_bram_EN_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_val_addr_bram_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_val_addr_bram_WEN_A);
    sensitive << ( tmp_1_reg_160 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_fu_134_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_106_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "execute_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, op_type, "(port)op_type");
    sc_trace(mVcdFile, hash, "(port)hash");
    sc_trace(mVcdFile, val_addr, "(port)val_addr");
    sc_trace(mVcdFile, key_val_dram_address0, "(port)key_val_dram_address0");
    sc_trace(mVcdFile, key_val_dram_ce0, "(port)key_val_dram_ce0");
    sc_trace(mVcdFile, key_val_dram_we0, "(port)key_val_dram_we0");
    sc_trace(mVcdFile, key_val_dram_d0, "(port)key_val_dram_d0");
    sc_trace(mVcdFile, key_val_dram_q0, "(port)key_val_dram_q0");
    sc_trace(mVcdFile, key_val_dram_address1, "(port)key_val_dram_address1");
    sc_trace(mVcdFile, key_val_dram_ce1, "(port)key_val_dram_ce1");
    sc_trace(mVcdFile, key_val_dram_q1, "(port)key_val_dram_q1");
    sc_trace(mVcdFile, val_addr_bram_Addr_A, "(port)val_addr_bram_Addr_A");
    sc_trace(mVcdFile, val_addr_bram_EN_A, "(port)val_addr_bram_EN_A");
    sc_trace(mVcdFile, val_addr_bram_WEN_A, "(port)val_addr_bram_WEN_A");
    sc_trace(mVcdFile, val_addr_bram_Din_A, "(port)val_addr_bram_Din_A");
    sc_trace(mVcdFile, val_addr_bram_Dout_A, "(port)val_addr_bram_Dout_A");
    sc_trace(mVcdFile, val_addr_bram_Clk_A, "(port)val_addr_bram_Clk_A");
    sc_trace(mVcdFile, val_addr_bram_Rst_A, "(port)val_addr_bram_Rst_A");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_106_p2, "tmp_fu_106_p2");
    sc_trace(mVcdFile, tmp_reg_156, "tmp_reg_156");
    sc_trace(mVcdFile, tmp_1_fu_112_p2, "tmp_1_fu_112_p2");
    sc_trace(mVcdFile, tmp_1_reg_160, "tmp_1_reg_160");
    sc_trace(mVcdFile, key_val_dram_addr_reg_164, "key_val_dram_addr_reg_164");
    sc_trace(mVcdFile, stored_val_reg_174, "stored_val_reg_174");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_5_fu_134_p2, "tmp_5_fu_134_p2");
    sc_trace(mVcdFile, tmp_5_reg_180, "tmp_5_reg_180");
    sc_trace(mVcdFile, stored_val2_0_s_fu_143_p3, "stored_val2_0_s_fu_143_p3");
    sc_trace(mVcdFile, ap_phi_mux_UnifiedRetVal_phi_fu_97_p6, "ap_phi_mux_UnifiedRetVal_phi_fu_97_p6");
    sc_trace(mVcdFile, UnifiedRetVal_reg_93, "UnifiedRetVal_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_118_p1, "tmp_2_fu_118_p1");
    sc_trace(mVcdFile, tmp_4_fu_129_p1, "tmp_4_fu_129_p1");
    sc_trace(mVcdFile, tmp_s_fu_139_p1, "tmp_s_fu_139_p1");
    sc_trace(mVcdFile, val_addr_bram_Addr_A_orig, "val_addr_bram_Addr_A_orig");
    sc_trace(mVcdFile, tmp_3_fu_123_p2, "tmp_3_fu_123_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("execute.hdltvin.dat");
    mHdltvoutHandle.open("execute.hdltvout.dat");
}

execute::~execute() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void execute::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_1))) {
        UnifiedRetVal_reg_93 = ap_const_lv32_FFFFFFFF;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_reg_160.read(), ap_const_lv1_1))) {
        UnifiedRetVal_reg_93 = key_val_dram_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_reg_156.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_1_reg_160.read(), ap_const_lv1_0))) {
        UnifiedRetVal_reg_93 = stored_val2_0_s_fu_143_p3.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_0))) {
        key_val_dram_addr_reg_164 =  (sc_lv<7>) (tmp_2_fu_118_p1.read());
        tmp_1_reg_160 = tmp_1_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        stored_val_reg_174 = key_val_dram_q1.read();
        tmp_5_reg_180 = tmp_5_fu_134_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_156 = tmp_fu_106_p2.read();
    }
}

void execute::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void execute::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void execute::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void execute::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void execute::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void execute::thread_ap_phi_mux_UnifiedRetVal_phi_fu_97_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_156.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_1_reg_160.read(), ap_const_lv1_0))) {
        ap_phi_mux_UnifiedRetVal_phi_fu_97_p6 = stored_val2_0_s_fu_143_p3.read();
    } else {
        ap_phi_mux_UnifiedRetVal_phi_fu_97_p6 = UnifiedRetVal_reg_93.read();
    }
}

void execute::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void execute::thread_ap_return() {
    ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_97_p6.read();
}

void execute::thread_key_val_dram_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        key_val_dram_address0 = key_val_dram_addr_reg_164.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        key_val_dram_address0 =  (sc_lv<7>) (tmp_2_fu_118_p1.read());
    } else {
        key_val_dram_address0 = "XXXXXXX";
    }
}

void execute::thread_key_val_dram_address1() {
    key_val_dram_address1 =  (sc_lv<7>) (tmp_4_fu_129_p1.read());
}

void execute::thread_key_val_dram_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        key_val_dram_ce0 = ap_const_logic_1;
    } else {
        key_val_dram_ce0 = ap_const_logic_0;
    }
}

void execute::thread_key_val_dram_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        key_val_dram_ce1 = ap_const_logic_1;
    } else {
        key_val_dram_ce1 = ap_const_logic_0;
    }
}

void execute::thread_key_val_dram_d0() {
    key_val_dram_d0 = ap_const_lv32_FFFFFFFF;
}

void execute::thread_key_val_dram_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_160.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_5_fu_134_p2.read(), ap_const_lv1_1))) {
        key_val_dram_we0 = ap_const_logic_1;
    } else {
        key_val_dram_we0 = ap_const_logic_0;
    }
}

void execute::thread_stored_val2_0_s_fu_143_p3() {
    stored_val2_0_s_fu_143_p3 = (!tmp_5_reg_180.read()[0].is_01())? sc_lv<32>(): ((tmp_5_reg_180.read()[0].to_bool())? stored_val_reg_174.read(): ap_const_lv32_FFFFFFFF);
}

void execute::thread_tmp_1_fu_112_p2() {
    tmp_1_fu_112_p2 = (!op_type.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(op_type.read() == ap_const_lv32_2);
}

void execute::thread_tmp_2_fu_118_p1() {
    tmp_2_fu_118_p1 = esl_zext<64,32>(val_addr.read());
}

void execute::thread_tmp_3_fu_123_p2() {
    tmp_3_fu_123_p2 = (!val_addr.read().is_01() || !ap_const_lv32_28.is_01())? sc_lv<32>(): (sc_biguint<32>(val_addr.read()) + sc_biguint<32>(ap_const_lv32_28));
}

void execute::thread_tmp_4_fu_129_p1() {
    tmp_4_fu_129_p1 = esl_zext<64,32>(tmp_3_fu_123_p2.read());
}

void execute::thread_tmp_5_fu_134_p2() {
    tmp_5_fu_134_p2 = (!key_val_dram_q0.read().is_01() || !hash.read().is_01())? sc_lv<1>(): sc_lv<1>(key_val_dram_q0.read() == hash.read());
}

void execute::thread_tmp_fu_106_p2() {
    tmp_fu_106_p2 = (!op_type.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(op_type.read() == ap_const_lv32_1);
}

void execute::thread_tmp_s_fu_139_p1() {
    tmp_s_fu_139_p1 = esl_zext<64,32>(hash.read());
}

void execute::thread_val_addr_bram_Addr_A() {
    val_addr_bram_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): val_addr_bram_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void execute::thread_val_addr_bram_Addr_A_orig() {
    val_addr_bram_Addr_A_orig =  (sc_lv<32>) (tmp_s_fu_139_p1.read());
}

void execute::thread_val_addr_bram_Clk_A() {
    val_addr_bram_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void execute::thread_val_addr_bram_Din_A() {
    val_addr_bram_Din_A = ap_const_lv32_FFFFFFFF;
}

void execute::thread_val_addr_bram_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        val_addr_bram_EN_A = ap_const_logic_1;
    } else {
        val_addr_bram_EN_A = ap_const_logic_0;
    }
}

void execute::thread_val_addr_bram_Rst_A() {
    val_addr_bram_Rst_A = ap_rst.read();
}

void execute::thread_val_addr_bram_WEN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_160.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_5_fu_134_p2.read(), ap_const_lv1_1))) {
        val_addr_bram_WEN_A = ap_const_lv4_F;
    } else {
        val_addr_bram_WEN_A = ap_const_lv4_0;
    }
}

void execute::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void execute::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"op_type\" :  \"" << op_type.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hash\" :  \"" << hash.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"val_addr\" :  \"" << val_addr.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_address0\" :  \"" << key_val_dram_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_ce0\" :  \"" << key_val_dram_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_we0\" :  \"" << key_val_dram_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_d0\" :  \"" << key_val_dram_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_val_dram_q0\" :  \"" << key_val_dram_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_address1\" :  \"" << key_val_dram_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_val_dram_ce1\" :  \"" << key_val_dram_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_val_dram_q1\" :  \"" << key_val_dram_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_Addr_A\" :  \"" << val_addr_bram_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_EN_A\" :  \"" << val_addr_bram_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_WEN_A\" :  \"" << val_addr_bram_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_Din_A\" :  \"" << val_addr_bram_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"val_addr_bram_Dout_A\" :  \"" << val_addr_bram_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_Clk_A\" :  \"" << val_addr_bram_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_addr_bram_Rst_A\" :  \"" << val_addr_bram_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

